{"version":3,"sources":["Products.js","App.js","serviceWorker.js","index.js"],"names":["ProductList","props","products","useState","cart","setCart","page","setPage","navigateTo","nextPage","map","brand_name","product_name","quantity","image_url","price","MRP","offer_text","index","className","key","src","alt","onClick","console","log","addToCart","length","productToRemove","filter","product","App","data","setdata","useEffect","fetch","then","rawdata","json","localStorage","setItem","JSON","stringify","catch","localdata","parse","getItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.85d01447.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst PAGE_PRODUCTS = 'productPage';\r\nconst PAGE_CART = 'cartPage';\r\n\r\nfunction ProductList(props) {\r\n    const { products } = props;\r\n\r\n    let [cart, setCart] = useState([]);\r\n    let [page, setPage] = useState(PAGE_PRODUCTS);\r\n\r\n    const addToCart = (products) => {\r\n        console.log(\"addtocart\");\r\n        setCart([...cart, { ...products }]);\r\n    };\r\n\r\n    const removeFromCart = (productToRemove) => {\r\n        setCart(\r\n            cart.filter((product) => product !== productToRemove)\r\n        );\r\n    };\r\n\r\n    const navigateTo = (nextPage) => {\r\n        setPage(nextPage);\r\n    };\r\n\r\n    const renderProducts = () => (\r\n        <>\r\n            <h1>Product Page</h1>\r\n            {products.map(({ brand_name, product_name, quantity, image_url, price, MRP, offer_text, index }) =>\r\n                <div className=\"products\" key={product_name}>\r\n                    <div>\r\n                        <img src={image_url} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"contentBox\">\r\n                        <h3>{brand_name}</h3>\r\n                        <h4>{product_name}</h4>\r\n                        <p>{quantity}</p>\r\n                        <p>MRP: {MRP}</p>\r\n                        <p>Rs: {price}</p>\r\n                    </div>\r\n                    <div className=\"discountText\">\r\n                        <p>{offer_text}% OFF</p>\r\n                    </div>\r\n                    <div className=\"buttonBox\">\r\n                        <button onClick={() => addToCart(products)}>Add to Cart</button>\r\n                        <button >Remove from Cart</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n            }\r\n            <footer className=\"footerBox\">\r\n                <button onClick={() => navigateTo(PAGE_CART)}> Go to Cart ( {cart.length} )</button>\r\n            </footer>\r\n        </>\r\n    );\r\n\r\n    const renderCart = () => (\r\n        <>\r\n            <h1>Cart Page</h1>\r\n            {cart.map(({ brand_name, product_name, quantity, image_url, price, MRP, offer_text, index }) =>\r\n                <div className=\"products\" key={index}>\r\n                    <div>\r\n                        <img src={image_url} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"contentBox\">\r\n                        <h3>{brand_name}</h3>\r\n                        <h4>{product_name}</h4>\r\n                        <p>{quantity}</p>\r\n                        <p>MRP: {MRP}</p>\r\n                        <p>Rs: {price}</p>\r\n                    </div>\r\n                    <div className=\"discountText\">\r\n                        <p>{offer_text}% OFF</p>\r\n                    </div>\r\n                    <div className=\"buttonBox\">\r\n                        <button onClick={() => removeFromCart(products)} >Remove from Cart</button>\r\n                    </div>\r\n                </div>\r\n\r\n            )}\r\n            <footer className=\"footerBox\">\r\n                <button onClick={() => navigateTo(PAGE_PRODUCTS)}> Go Back </button>\r\n            </footer>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            {page === PAGE_PRODUCTS && renderProducts()}\r\n            {page === PAGE_CART && renderCart()}\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ProductList from './Products.js';\n//import CartList from './Cart.js';\n\n\nfunction App() {\n\n  let [data, setdata] = useState([]);\n  let [page, setPage] = useState('productPage')\n\n  useEffect(() => {\n    fetch(process.env.PUBLIC_URL + \"/data.json\").then(rawdata => {\n      return rawdata.json()\n    }).then(data => {\n      console.log(data);\n      localStorage.setItem(\"fallbackdata\", JSON.stringify(data))\n      setdata(data.products || []);\n    }).catch(() => {\n      if (\"fallbackdata\" in localStorage) {\n        let localdata = JSON.parse(localStorage.getItem(\"fallbackdata\"));\n        setdata(localdata.products || [])\n      }\n    })\n  }, [])\n\n\n\n  if (page === \"productPage\") return (\n    <div className=\"App\">\n      <ProductList products={data}></ProductList>\n    </div>\n  ); else return (\n    <div className=\"App\">\n      <h1>Cart page</h1>\n      {/* <CartList products={data}></CartList> */}\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}